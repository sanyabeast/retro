type: ShaderMaterial
params:
  vertexShader: |
    varying vec2 vUv;
    uniform float opacity;
    uniform float cell_scale;

    void main() {
        vUv = uv;
        vec4 pos = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
        gl_Position = pos;
    }

  fragmentShader: |
    #ifdef FRAMEBUFFER_PRECISION_HIGH
        uniform highp sampler2D map;
    #else
        uniform lowp sampler2D map;
    #endif

    uniform sampler2D noise_texture;  
    uniform sampler2D normal_buffer;
    uniform sampler2D depth_buffer;
    uniform float samples;


    #import retro.blending
    #import retro.convert

    #define QUALITY samples

    vec3 decode_normal(vec3 n){
      return vec3(
        (n.x * 2.) - 1.,
        (n.y * 2.) - 1.,
        (n.z * 2.) - 1.
      );
    }

    float get_lightness(vec3 c){
      return max(max(c.x, c.y), c.z);
      return (c.x + c.y + c.z) / 3.;
    }

    void mainImage(const in vec4 inputColor, const in vec2 uv, out vec4 outputColor) {
        outputColor = inputColor;
        vec3 rn_local = texture2D(normal_buffer, uv).xyz;
        vec3 n_local = decode_normal(rn_local);
        float noise = 0.5 + (mod(texture2D(noise_texture, uv * 32.).r + (time * 4.), 1.)) * 0.5;

        float uv_step = 1. / 15.;
        float steps_a = 8.;
        float steps_b = 8.;
        float acml_luma = 0.0;
        float acml_luma_corr = 1. / (steps_a * steps_b / 2.);
        float dpt_local = texture2D(depth_buffer, uv).r;
        vec3  acml_color = vec3(1., 1., 1.) *acml_luma_corr;

        /*factors*/
        float acml_color_f = 2.;

        for (int i = 0; i < int(steps_a); i++){
          for (int j = 0; j < int(steps_b); j++){
            float rp = float(j) / steps_b;
            float uv_dx = sin(2. * 3.14 * (float(i) / steps_a)) * rp * uv_step;
            float uv_dy = cos(2. * 3.14 * (float(i) / steps_a)) * rp * uv_step;
            vec2 probe_uv = uv + vec2(uv_dx, uv_dy);
            float dpt_alien = texture2D(depth_buffer, probe_uv).r;

            vec3 rn_alien = texture2D(normal_buffer, probe_uv).xyz;
            vec3 n_alien = decode_normal(rn_alien);
            vec3 c_alien = texture2D(map, probe_uv).xyz;

            float dir_factor = pow(1. - (length(n_local + n_alien)/2.), 2.);
            float dpt_factor = 1.-abs(dpt_local - dpt_alien);

            //dir_factor = 1.-dot(n_local, n_alien);
            acml_color += c_alien * acml_luma_corr * dir_factor * dpt_factor * acml_color_f;
            acml_luma += dir_factor * acml_luma_corr;
          }
        }

        //acml_color = acml_color * acml_luma;
        acml_color = normalize(acml_color);

        /*acml_luma*/
        outputColor.xyz = vec3(acml_luma, acml_luma, acml_luma);

        /*aclm_color*/
        outputColor.xyz = BlendSoftLight(inputColor.xyz, acml_color);
        //outputColor.xyz = BlendSoftLight(inputColor.xyz, mix(inputColor.xyz, acml_color, noise));

    }
  transparent: true
  blending: 1
  uniforms:
    opacity:
      type: f
      value: 1
    normal_buffer:
      type: t
    depth_buffer:
      type: t
    noise_texture:
      type: t
