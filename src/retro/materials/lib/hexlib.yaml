code: >

  const vec2 svec = vec2(1.7320508, 1);

  float get_hex(vec2 p, float scale){
    p -=0.5;
    p *= scale;
    float v = 1.-max(dot(abs(p.xy), svec/2.), abs(p.y*svec.y)) * 2.;
    return v;
  }

  float get_hex2(vec2 p, float scale, float treshold){
    float hex_uv = get_hex(p, scale);
    return hex_uv > treshold ? 1. : 0.;
  }

  float get_hex_ring(vec2 p, float scale, float width){
    float hex_uv_a = get_hex2(p, scale, 0.2);
    float hex_uv_b = get_hex2(p, scale - (scale * width), 0.2);
    if (hex_uv_a > 0.1){
      if (hex_uv_b > 0.1){
        return 0.;
      } else {
        return 1.;
      }
    } else {
      if (hex_uv_b > 0.1){
        return 1.;
      } else {
        return 0.;
      }
    }
  }

  void draw_test_hex(inout vec4 out_color){
    float hex_uv = get_hex_ring(vUv, 1., 0.1);
    out_color = mix(out_color, vec4(hex_uv), hex_uv);
  }

  float HexDist(vec2 p, vec2 id, float factor){
      float t = time;
      mat2 rot = mat2(cos(t-id.x/factor), -sin(t), sin(t), cos(t-id.x/factor));
      p*=rot*1.3;
      p = abs(p); // Copy over first quad into all
      float c = dot(p, normalize(vec2(1,1.73)));// Dot to get correct angle
      return max(c, p.x); // Find where the vert line and angled intersect
  }

  vec4 HexCoords(vec2 uv, float factor){
      uv = vec2(uv.y, uv.x);
      vec2 rep = vec2(1, 1.73);
      vec2 h = rep*0.5;
      vec2 a = mod(uv, rep)-h;
      vec2 b = mod(uv-h, rep)-h;

      
      vec2 gv;
    if(length(a) < length(b))
        gv = a;
      else 
          gv = b;
      
      vec2 id = (uv-gv)+factor;
      float y = 0.5-HexDist(gv, id, factor);
      return vec4(gv.x, y, id.x, id.y);
  }

    