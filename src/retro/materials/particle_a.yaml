type: ShaderMaterial
params:
  extend: "sprite"
  vertexShader: >
    uniform float rotation;
    uniform vec2 center;

    #include <common>
    #include <uv_pars_vertex>
    #include <fog_pars_vertex>
    #include <logdepthbuf_pars_vertex>
    #include <clipping_planes_pars_vertex>

    #import retro.corelib

    void main() {

      #include <uv_vertex>
      vUv = uv;

      vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );

      vec2 scale;
      scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
      scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );

      #ifndef USE_SIZEATTENUATION

        bool isPerspective = isPerspectiveMatrix( projectionMatrix );

        if ( isPerspective ) scale *= - mvPosition.z;

      #endif

      vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;

      vec2 rotatedPosition;
      rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
      rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;

      mvPosition.xy += rotatedPosition;

      gl_Position = projectionMatrix * mvPosition;

      #include <logdepthbuf_vertex>
      #include <clipping_planes_vertex>
      #include <fog_vertex>
    }


  fragmentShader: >
    uniform sampler2D map;
    uniform float particle_size;
    uniform float particle_index;
    uniform float particle_degree;
    uniform float particle_speed;
    #import retro.corelib

    void main(void) {
      vec2 uv = rotate_uv(vUv, vec2(0.5), -particle_degree);
      gl_FragColor = texture2D(map, uv);
      gl_FragColor.a = gl_FragColor.a * opacity;
    }
  transparent: true
  blending: 1
  uniforms:
    opacity:
      type: f
      value: 1
    map:
      type: t
    particle_size:
      type: f
      value: 1
    particle_index:
      type: f
      value: 0
    particle_degree:
      type: f
      value: 1
    particle_speed:
      type: f
      value: 1
    color_a:
      type: "#ffffff"
      value: 1
    color_n:
      type: v3
      value: "#000000"
